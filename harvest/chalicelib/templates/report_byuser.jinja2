{% extends "base.jinja2" %}
{% macro table(reports) -%}
<table class="table is-striped is-fullwidth">
  <thead>
    <tr>
      <th>投稿日時</th>
      <th style="min-width: 12rem">場所</th>
      <th style="min-width: 5rem">周回数</th>
      <th>ドロップ</ht>
    </tr>
  </thead>
  <tbody>
{% for r in reports %}<tr>
  <td>
    <a href="https://twitter.com/{{ r.reporter }}/status/{{ r.id }}" target="_blank">
      {{ r.timestamp.strftime("%Y-%m-%d") }}<br>
      {{ r.timestamp.strftime("%H:%M:%S") }}
      <span style="margin-left: 0.1rem"><small><i class="fas fa-external-link-alt"></i></small></span>
    </a>
  </td>
  <td>
    <a href="../quest/{{ r.quest_id }}.html">
      {{ r.chapter }}<br>{{ r.place }}
    </a>
  </td>
  <td>{{ r.runcount }}</td>
  <td>{% for k, v in r['items'].items() %}{{ k }}: {{ v }}{% if not loop.last %}, {% endif %}{% endfor %}</td>
</tr>{% endfor %}
  </tbody>
</table>

{%- endmacro -%}

{% block title %}{{ reporter }}{% endblock %}

{% block body %}

<h1 class="title" style="margin-bottom: 2.5rem">
  {{ reporter }}
  <a href="https://twitter.com/{{ reporter }}" target="_blank"><small><i class="fas fa-external-link-alt"></i></small></a>
</h1>

<p class="subtitle">イベント</p>
{% if event_reports %}
{{ table(event_reports) }}
{% else %}
<p style="margin-bottom: 2rem">なし</p>
{% endif %}

<p class="subtitle">恒常フリークエスト</p>
{% if freequest_reports %}
{{ table(freequest_reports) }}
{% else %}
<p style="margin-bottom: 2rem">なし</p>
{% endif %}

<p class="subtitle">チャート</p>
<div class="box" id="chartbox">
  <div id="calender_chart"></div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
  var jsondata = null
  const jsonurl = './{{ reporter }}.json'

  google.charts.load("current", {packages:["calendar"]});
  google.charts.setOnLoadCallback(getReady);

  function getReady() {
    fetch(jsonurl).then(response =>
      response.json()
    ).then(json => {
      jsondata = json
      drawChart(jsondata)
    })
  }

  function drawChart(json) {
    if (json === null) {
      console.log('cannot draw chart: json is null')
      return
    }

    const dataTable = new google.visualization.DataTable();
    dataTable.addColumn({ type: 'date', id: 'Date' });
    dataTable.addColumn({ type: 'number', id: 'number' });

    const datagroup = jsondata.reduce(function(accum, e) {
      const d = new Date(e.timestamp)
      const key = d.toLocaleDateString()
      let v = null
      if (key in accum) {
        v = accum[key]
        v.count += e.runcount
      } else {
        v = {
          'date': new Date(d.getFullYear(), d.getMonth(), d.getDate()),
          'count': e.runcount,
        }
      }
      accum[key] = v
      return accum
    }, {})

    const rows = Object.keys(datagroup).map(key => {
      v = datagroup[key]
      return [
        v.date,
        v.count,
      ]
    })
    dataTable.addRows(rows);

    const chart = new google.visualization.Calendar(document.getElementById('calender_chart'));
    const years = new Set(jsondata.map(e => new Date(e.timestamp).getFullYear()))
    console.log('years', years)
    const chartHeight = 50 + years.size * 150
    console.log('chart height', chartHeight)

    const boxWidth = document.getElementById('chartbox').clientWidth
    console.log('chartbox width', boxWidth)
    let cellSize = 9 + Math.ceil((boxWidth - 600) / 57)
    if (cellSize > 18) {
      cellSize = 18
    }
    if (cellSize < 9) {
      cellSize = 9
    }
    console.log('cellSize', cellSize)

    const options = {
      height: chartHeight,
      calendar: { cellSize: cellSize },
      colorAxis: { colors: ['#76daff', '#050597'] },
    };

    chart.draw(dataTable, options);
  }

  let currentViewWidth = null
  let orientationchangeTimer
  window.addEventListener('orientationchange', function(){
    if (!orientationchangeTimer) {
      clearTimeout(orientationchangeTimer)
    }
    orientationchangeTimer = setTimeout(function(){
      if (window.innerWidth != currentViewWidth) {
        console.log('orientationchange event. width', window.innerWidth)
        currentViewWidth = window.innerWidth
        drawChart(jsondata)
      }
    }, 300);
  });

  let resizeTimer = 0
  window.addEventListener('resize', function(){
    if (resizeTimer > 0) {
      clearTimeout(resizeTimer)
    }
    resizeTimer = setTimeout(function(){
      if (window.innerWidth != currentViewWidth) {
        console.log('resize event. width', window.innerWidth)
        currentViewWidth = window.innerWidth
        drawChart(jsondata)
      }
    }, 300);
  });
</script>

{% endblock %}
